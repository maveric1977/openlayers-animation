* v1
** DONE TimedLayer interface
   - defined interface for setting current time for layer
** NOPE TimedLayerWrapper
   CLOSED: [2014-03-13 Thu 17:26]
   - wraps an existing layer
   - user-supplied layer, user-supplied callback that sets time of the layer
     - may e.g. do nothing
   - doesn't work, would need to monkey-patch
** DONE TimedLayerClassWrapper
   CLOSED: [2014-03-14 Fri 15:04]
   - wraps an existing layer class
   - creates a new class with setTime
** DONE PreloadingTimedLayer
   CLOSED: [2014-03-17 Mon 13:54]
   - implements TimedLayer
   - instantiates layers through user-supplied factory function makeLayer(t)
     - may pre-instantiate layers
   - select layer to be displayed based on time property
** DONE RangedLayer interface
   CLOSED: [2014-03-18 Tue 17:58]
   - extension to TimedLayers
   - defines interface for setting start/end visible times for layer
** DONE RangedLayerClassWrapper
   CLOSED: [2014-03-18 Tue 17:58]
   - wraps any TimedLayer
   - visibility is be controlled by RangedLayerWrapper itself
     - intercept setVisibility calls, track both set-visibility and time-visibility, generate actual-visibility from them
     - call setVisibility on wrapped layer based on actual-visibility whenever it changes
   - time should be set by directly modifying time property of the
     layer, which it passes on to the wrapped layer, like for plain WMS
     and WMTS layers
   - start/end times vs. current time as passed through time should control visibility
** DONE Add range support to PreloadingTimedLayer
   CLOSED: [2014-03-18 Tue 17:58]
* v1.5
** DONE Add preload policy to PreloadingTimedLayer
   CLOSED: [2014-03-19 Wed 10:57]
   - only when it has grown range support
   - preload((t, steprange)) -> to-preload timesteps in-order
** DONE Add unload policy to PreloadingTimedLayer
   CLOSED: [2014-03-20 Thu 14:53]
   - retain(loaded_times, (t, range)) -> to-retain timesteps
   - added, not tested, difficult-to-test
* v2
** DONE LayerGroupCoordinator
   CLOSED: [2014-03-24 Mon 15:40]
   - knows about user-visible layers (which are potentially groups of layers)
   - controls begin and end times passed to (Ranged) layers
   - receives updates to begin/end times of individual layers
   - receives a configuration that specifies constraints such as "B starts where A ends"
     - constraints limit overlap
   - can also pass begin and end times directly, but point is that coordinator can handle configurations like "A until it ends, then B"
* v3
** TODO Interface review
*** DONE Add getTime() to TimedLayer?
    CLOSED: [2014-03-24 Mon 18:09]
*** DONE Add getRange() to RangedLayer?
    CLOSED: [2014-03-24 Mon 18:09]
*** DONE Change setTimeAndRange() of RangedLayer to take range as array instead of begin and end?
    CLOSED: [2014-03-24 Mon 18:09]
** DONE Add setRange() to RangedLayer
   CLOSED: [2014-03-24 Mon 18:09]
** DONE What should setTime() do when the time set is outside range?
    CLOSED: [2014-03-24 Mon 18:26]
    - now hides layer with setVisiblity() or equivalent
      - ok for now? maybe add policy alter
** DONE Need to be able to set range without touching current time
    CLOSED: [2014-03-24 Mon 18:26]
** DONE TimedLayer and RangedLayer in wrong "package"
    CLOSED: [2014-03-24 Mon 18:27]
    - moved from OpenLayers.Layer.x to OpenLayers.Layer.Animation.x
** DONE Missing frames?? Generated URLs ok - sometimes just not shown?
   CLOSED: [2014-03-26 Wed 11:54]
   - can't find any fault in logic
   - but configuration in test HTML sometimes expects that observations are available when they are not yet / forecasts are available when they no longer are
* DONE v3.1
  CLOSED: [2014-03-28 Fri 15:02]
** DONE Get current time range(s) from coordinator
   CLOSED: [2014-03-26 Wed 17:17]

* DONE v3.2
  CLOSED: [2014-03-28 Fri 15:02]
** DONE Generate frame events
   CLOSED: [2014-03-26 Wed 18:51]
   - frame load start
   - frame load end
   - frame changed
* DONE v4
  CLOSED: [2014-03-28 Fri 15:02]
** DONE Fading
   CLOSED: [2014-03-27 Thu 14:45]
   - pass fader function to TimeAwareLayerWrapper (and LayerSequenceCoordinator to enable fading between layers)
   - fader function receives old and new layer and performs fading however it pleases
     - either old or new layer may be undefined, in which case fader should just deal with the one that is defined
       - some other fader is dealing with the other layer
     - it should probably only control opacity, though
     - fader must call a fadeDone callback once it is done fading
   - control flow
     - setVisible(true) on new layer
     - pass old and new and cb to layer
     - fader does its thing over time and calls cb
     - cb does setVisible(false) on old layer
* TODO v5
** TODO Should ranged layer limit itself to given resolution, or should that be handled in LayerGroupCoordinator?
    - *something* should ensure that a layer shows the
      previous/next/some other time and most importantly doesn't try
      to request invalid times
      - layer should limit itself
*** DONE Need timestep.js from wmap
    CLOSED: [2014-03-28 Fri 13:21]
    - added as dependency for now
*** TODO Replace ranges with timestep.js
    - can't be replaced in all places, e.g. for constraint time ranges
      time ranges are actually the preferable solution, it seems
**** NOPE Need to add contains() to timestep? no, just add time selection policy
     CLOSED: [2014-03-28 Fri 15:29]
**** DONE Need to all constrain() to timestep, to constrain it to start/end times
     CLOSED: [2014-03-28 Fri 15:41]
     - restricted already does almost that, but doesn't accept a timestep object, but rather the time step
**** DONE Need to add support for semi-constraining to timestep
     CLOSED: [2014-03-28 Fri 16:50]
**** DONE Need to make constraints of timesteps available through api
     CLOSED: [2014-03-28 Fri 17:25]
**** DONE The time selection policy part is missing still
     CLOSED: [2014-04-04 Fri 11:29]
     - and still, spent the day fixing bugs and thinking about wmap
       - added time slection policies, they are too simple
**** DONE Rewrite RetainPolicy interface now that range is available through layer
     CLOSED: [2014-04-04 Fri 12:19]
**** TODO Need to separate concepts of available range and visible range in layers
     - largely because visible range of layer needs to correspond to timeline
       - if single range is specified so that outermost (visible)
         range is larger than inner (available) range, then the
         combined range should show layer contents when inside outer
         range but outside inner range
         - yet the inner and outer ranges should have same rules
           -> impossible
     - if a single range is specified, then the time selection logic
       needs to be pushed down to the range object, which is just wrong
     - the information is already separate in LayerGroupCoordinator
       - and the LayerGroupCoordinator interface is good
     - already separated "shown time" and "requested time" in PreloadingTimedLayer
       - should treat time as "requested time" for visible range purposes
       - and "shown time" for available range purposes
       - available range in PreloadingTimedLayer is not strictly necessary within PreloadingTimedLayer
         - but policies need it:
           - at least PreloadPolicy should be able to preload times outside visible range
             - need concept of "extended visible range", which covers
               all frames that may be selected by TimeSelector for times within visible range

* TODO v6
** DONE Timelines?
   CLOSED: [2014-04-14 Mon 16:57]
   - need to be able to control visibility of subsequent layers simply
   - will form a matrix with time groups
     - well, not quite - just a seaprate grouping
** TODO Layer switching based on timelines, not layers
   - need to rewrite layer switcher, apparently
     - hmm, nope
     - need to set displayLayerInSwitcher to false for all timeline layers
     - then create pseudo layers that have displayLayerInSwitcher but that don't actually show anything
       - and have those layers control visibility of the timelines through the coordinator
** DONE Always set time in animator
   CLOSED: [2014-04-14 Mon 18:03]
   - so that something will actually be visible when the page loads
** TODO Why does GetCapabilities update reset load state of layers?
** TODO How are the gray/green/blue/red colors of loading bars determined?
   - and especially what happens when you zoom?
   - could work as follows:
     - frame time is mapped to box
     - box is initially gray
     - gray -> blue on load start event
     - gray -> green on load end event
     - blue -> green on load start/end event if number of load start events matches number of load end events
     - green -> blue on load start event if number of load start events greater than number of load end events
     - any -> red on error event
*** TODO Are error events currently generated at all?
** TODO UI testing
   - need example configurations
** NOPE Ability to initiate preload externally?
   CLOSED: [2014-04-11 Fri 16:11]
   - nope, let's leave preload controlled by time setting and just set time eagerly
* v7
** TODO Range is still needed in certain places, make a class for it
** TODO Make a class for the constraint object

* v8
** legendinfo?

